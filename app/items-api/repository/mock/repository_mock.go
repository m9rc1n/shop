// Code generated by MockGen. DO NOT EDIT.
// Source: app/items-api/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repository "github.com/m9rc1n/shop/app/items-api/repository"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(name string, quantity int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, quantity)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(name, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), name, quantity)
}

// Get mocks base method.
func (m *MockRepository) Get(id int64) (*repository.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*repository.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), id)
}

// List mocks base method.
func (m *MockRepository) List() ([]*repository.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*repository.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// MigrateDown mocks base method.
func (m *MockRepository) MigrateDown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateDown")
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateDown indicates an expected call of MigrateDown.
func (mr *MockRepositoryMockRecorder) MigrateDown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateDown", reflect.TypeOf((*MockRepository)(nil).MigrateDown))
}

// MigrateUp mocks base method.
func (m *MockRepository) MigrateUp() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateUp")
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateUp indicates an expected call of MigrateUp.
func (mr *MockRepositoryMockRecorder) MigrateUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateUp", reflect.TypeOf((*MockRepository)(nil).MigrateUp))
}

// Reserve mocks base method.
func (m *MockRepository) Reserve(id, reservationId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reserve", id, reservationId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reserve indicates an expected call of Reserve.
func (mr *MockRepositoryMockRecorder) Reserve(id, reservationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reserve", reflect.TypeOf((*MockRepository)(nil).Reserve), id, reservationId)
}
