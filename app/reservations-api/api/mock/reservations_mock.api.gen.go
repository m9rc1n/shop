// Code generated by MockGen. DO NOT EDIT.
// Source: app/reservations-api/api/reservations.api.gen.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/m9rc1n/shop/app/reservations-api/api"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CreateReservation mocks base method.
func (m *MockClientInterface) CreateReservation(ctx context.Context, body api.CreateReservationJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReservation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReservation indicates an expected call of CreateReservation.
func (mr *MockClientInterfaceMockRecorder) CreateReservation(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*MockClientInterface)(nil).CreateReservation), varargs...)
}

// CreateReservationWithBody mocks base method.
func (m *MockClientInterface) CreateReservationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReservationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReservationWithBody indicates an expected call of CreateReservationWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateReservationWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservationWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateReservationWithBody), varargs...)
}

// IsAlive mocks base method.
func (m *MockClientInterface) IsAlive(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsAlive", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAlive indicates an expected call of IsAlive.
func (mr *MockClientInterfaceMockRecorder) IsAlive(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlive", reflect.TypeOf((*MockClientInterface)(nil).IsAlive), varargs...)
}

// IsReady mocks base method.
func (m *MockClientInterface) IsReady(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsReady", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReady indicates an expected call of IsReady.
func (mr *MockClientInterfaceMockRecorder) IsReady(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockClientInterface)(nil).IsReady), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// CreateReservationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateReservationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.CreateReservationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReservationWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.CreateReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReservationWithBodyWithResponse indicates an expected call of CreateReservationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateReservationWithBodyWithResponse(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateReservationWithBodyWithResponse), varargs...)
}

// CreateReservationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateReservationWithResponse(ctx context.Context, body api.CreateReservationJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.CreateReservationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReservationWithResponse", varargs...)
	ret0, _ := ret[0].(*api.CreateReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReservationWithResponse indicates an expected call of CreateReservationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateReservationWithResponse(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateReservationWithResponse), varargs...)
}

// IsAliveWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) IsAliveWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.IsAliveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsAliveWithResponse", varargs...)
	ret0, _ := ret[0].(*api.IsAliveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAliveWithResponse indicates an expected call of IsAliveWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) IsAliveWithResponse(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAliveWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).IsAliveWithResponse), varargs...)
}

// IsReadyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) IsReadyWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.IsReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsReadyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.IsReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReadyWithResponse indicates an expected call of IsReadyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) IsReadyWithResponse(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReadyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).IsReadyWithResponse), varargs...)
}

// MockServerInterface is a mock of ServerInterface interface.
type MockServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServerInterfaceMockRecorder
}

// MockServerInterfaceMockRecorder is the mock recorder for MockServerInterface.
type MockServerInterfaceMockRecorder struct {
	mock *MockServerInterface
}

// NewMockServerInterface creates a new mock instance.
func NewMockServerInterface(ctrl *gomock.Controller) *MockServerInterface {
	mock := &MockServerInterface{ctrl: ctrl}
	mock.recorder = &MockServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerInterface) EXPECT() *MockServerInterfaceMockRecorder {
	return m.recorder
}

// CreateReservation mocks base method.
func (m *MockServerInterface) CreateReservation(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateReservation", w, r)
}

// CreateReservation indicates an expected call of CreateReservation.
func (mr *MockServerInterfaceMockRecorder) CreateReservation(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*MockServerInterface)(nil).CreateReservation), w, r)
}

// IsAlive mocks base method.
func (m *MockServerInterface) IsAlive(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsAlive", w, r)
}

// IsAlive indicates an expected call of IsAlive.
func (mr *MockServerInterfaceMockRecorder) IsAlive(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlive", reflect.TypeOf((*MockServerInterface)(nil).IsAlive), w, r)
}

// IsReady mocks base method.
func (m *MockServerInterface) IsReady(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsReady", w, r)
}

// IsReady indicates an expected call of IsReady.
func (mr *MockServerInterfaceMockRecorder) IsReady(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockServerInterface)(nil).IsReady), w, r)
}
